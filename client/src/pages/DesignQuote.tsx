
import { useState, useEffect } from "react";
import { useAuth } from "@/hooks/useAuth";
import { useToast } from "@/hooks/use-toast";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import Navigation from "@/components/Navigation";
import { 
  ArrowLeft,
  Package,
  Ruler,
  Palette,
  Printer,
  Send,
  CheckCircle,
  AlertCircle
} from "lucide-react";

interface DesignData {
  imageUrl: string;
  prompt: string;
  timestamp: number;
}

interface FormData {
  quantity: string;
  labelType: string;
  material: string;
  size: string;
  finishing: string;
  urgency: string;
  notes: string;
  companyName: string;
  contactName: string;
  email: string;
  phone: string;
}

export default function DesignQuote() {
  const { isAuthenticated, user } = useAuth();
  const { toast } = useToast();
  const [designData, setDesignData] = useState<DesignData | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [formData, setFormData] = useState<FormData>({
    quantity: '',
    labelType: 'sheet_label',
    material: '',
    size: '',
    finishing: '',
    urgency: 'normal',
    notes: '',
    companyName: user?.companyName || '',
    contactName: `${user?.firstName || ''} ${user?.lastName || ''}`.trim(),
    email: user?.email || '',
    phone: user?.phone || ''
  });

  useEffect(() => {
    // Get design data from localStorage
    const storedDesign = localStorage.getItem('selectedDesign');
    if (storedDesign) {
      try {
        const parsed = JSON.parse(storedDesign);
        setDesignData(parsed);
      } catch (error) {
        console.error('Error parsing design data:', error);
        toast({
          title: "Hata",
          description: "Tasarım bilgileri alınamadı. Lütfen tekrar deneyin.",
          variant: "destructive",
        });
      }
    }

    // Update form with user data when available
    if (user) {
      setFormData(prev => ({
        ...prev,
        companyName: user.companyName || '',
        contactName: `${user.firstName || ''} ${user.lastName || ''}`.trim(),
        email: user.email || '',
        phone: user.phone || ''
      }));
    }
  }, [user, toast]);

  const handleInputChange = (field: keyof FormData, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Validation
    if (!formData.quantity || parseInt(formData.quantity) < 1) {
      toast({
        title: "Eksik Bilgi",
        description: "Lütfen miktar bilgisini giriniz.",
        variant: "destructive",
      });
      return;
    }

    if (!formData.companyName.trim()) {
      toast({
        title: "Eksik Bilgi", 
        description: "Lütfen firma adını giriniz.",
        variant: "destructive",
      });
      return;
    }

    if (!formData.email.trim()) {
      toast({
        title: "Eksik Bilgi",
        description: "Lütfen e-posta adresini giriniz.",
        variant: "destructive",
      });
      return;
    }

    setIsSubmitting(true);

    try {
      const quoteData = {
        title: `Tasarım Baskı Talebi - ${formData.quantity} Adet`,
        type: formData.labelType,
        category: 'design_print',
        quantity: parseInt(formData.quantity),
        specifications: {
          quantity: parseInt(formData.quantity),
          labelType: formData.labelType,
          material: formData.material,
          size: formData.size,
          finishing: formData.finishing,
          urgency: formData.urgency,
          notes: formData.notes,
          designUrl: designData?.imageUrl,
          designPrompt: designData?.prompt
        },
        contactInfo: {
          companyName: formData.companyName,
          contactName: formData.contactName,
          email: formData.email,
          phone: formData.phone
        },
        designIntegrated: true,
        autoGenerated: false
      };

      const endpoint = isAuthenticated ? '/api/quotes' : '/api/quotes/public';
      const response = await fetch(endpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(quoteData),
      });

      if (response.ok) {
        // Clear stored design data
        localStorage.removeItem('selectedDesign');
        
        toast({
          title: "Teklif Başarıyla Gönderildi",
          description: "Tasarımınız için teklif talebiniz matbaa firmalarına iletildi. En kısa sürede size dönüş yapılacaktır.",
        });

        // Redirect based on authentication
        setTimeout(() => {
          if (isAuthenticated) {
            window.location.href = '/customer-dashboard';
          } else {
            window.location.href = '/';
          }
        }, 2000);
      } else {
        throw new Error('Quote submission failed');
      }
    } catch (error) {
      console.error('Quote submission error:', error);
      toast({
        title: "Hata",
        description: "Teklif gönderilirken bir hata oluştu. Lütfen tekrar deneyin.",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const labelTypeOptions = [
    { value: 'sheet_label', label: 'Yaprak Etiket', description: 'A4 formatında kesimli etiketler' },
    { value: 'roll_label', label: 'Rulo Etiket', description: 'Sürekli form etiketler' },
    { value: 'general_printing', label: 'Genel Baskı', description: 'Poster, kartvizit, broşür' }
  ];

  const materialOptions = [
    { value: 'pp', label: 'PP Film (Su Geçirmez)' },
    { value: 'pe', label: 'PE Film (Esnek)' },
    { value: 'paper', label: 'Kuşe Kağıt' },
    { value: 'thermal', label: 'Termal Kağıt' },
    { value: 'vinyl', label: 'Vinil' }
  ];

  const finishingOptions = [
    { value: 'matte', label: 'Mat Selefon' },
    { value: 'glossy', label: 'Parlak Selefon' },
    { value: 'uv', label: 'UV Vernik' },
    { value: 'none', label: 'Yüzey İşlemi Yok' }
  ];

  if (!designData) {
    return (
      <div className="min-h-screen bg-gray-50">
        <Navigation />
        <div className="max-w-2xl mx-auto px-4 py-16">
          <Card>
            <CardContent className="text-center py-12">
              <AlertCircle className="h-16 w-16 text-gray-400 mx-auto mb-4" />
              <h2 className="text-xl font-semibold text-gray-900 mb-2">Tasarım Bulunamadı</h2>
              <p className="text-gray-600 mb-6">Teklif almak için önce bir tasarım seçmeniz gerekiyor.</p>
              <Button onClick={() => window.location.href = '/customer-dashboard'}>
                <ArrowLeft className="h-4 w-4 mr-2" />
                Tasarım Motoruna Dön
              </Button>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <Navigation />
      
      <div className="max-w-6xl mx-auto px-4 py-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center gap-4 mb-4">
            <Button 
              variant="outline" 
              onClick={() => window.location.href = '/customer-dashboard'}
              className="flex items-center gap-2"
            >
              <ArrowLeft className="h-4 w-4" />
              Geri Dön
            </Button>
            <div>
              <h1 className="text-3xl font-bold text-gray-900">Tasarım için Hızlı Teklif</h1>
              <p className="text-gray-600">Seçtiğiniz tasarım için baskı teklifi alın</p>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Design Preview */}
          <div className="lg:col-span-1">
            <Card className="sticky top-8">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Palette className="h-5 w-5" />
                  Seçilen Tasarım
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="aspect-square rounded-lg overflow-hidden border">
                    <img 
                      src={designData.imageUrl} 
                      alt="Seçilen Tasarım"
                      className="w-full h-full object-cover"
                    />
                  </div>
                  <div className="text-sm text-gray-600">
                    <p><strong>Açıklama:</strong></p>
                    <p className="italic">{designData.prompt}</p>
                  </div>
                  <Badge variant="secondary" className="w-full justify-center">
                    Otomatik Entegre Edildi
                  </Badge>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Quote Form */}
          <div className="lg:col-span-2">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Send className="h-5 w-5" />
                  Hızlı Teklif Formu
                </CardTitle>
              </CardHeader>
              <CardContent>
                <form onSubmit={handleSubmit} className="space-y-6">
                  {/* Product Specifications */}
                  <div className="space-y-4">
                    <h3 className="text-lg font-semibold flex items-center gap-2">
                      <Package className="h-5 w-5" />
                      Ürün Özellikleri
                    </h3>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="quantity">Miktar (Adet) *</Label>
                        <Input
                          id="quantity"
                          type="number"
                          min="1"
                          value={formData.quantity}
                          onChange={(e) => handleInputChange('quantity', e.target.value)}
                          placeholder="Örn: 1000"
                          required
                        />
                      </div>

                      <div>
                        <Label htmlFor="labelType">Etiket Türü *</Label>
                        <Select value={formData.labelType} onValueChange={(value) => handleInputChange('labelType', value)}>
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            {labelTypeOptions.map(option => (
                              <SelectItem key={option.value} value={option.value}>
                                <div>
                                  <div className="font-medium">{option.label}</div>
                                  <div className="text-sm text-gray-500">{option.description}</div>
                                </div>
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>

                      <div>
                        <Label htmlFor="material">Malzeme</Label>
                        <Select value={formData.material} onValueChange={(value) => handleInputChange('material', value)}>
                          <SelectTrigger>
                            <SelectValue placeholder="Malzeme seçin" />
                          </SelectTrigger>
                          <SelectContent>
                            {materialOptions.map(option => (
                              <SelectItem key={option.value} value={option.value}>
                                {option.label}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>

                      <div>
                        <Label htmlFor="size">Boyut</Label>
                        <Input
                          id="size"
                          value={formData.size}
                          onChange={(e) => handleInputChange('size', e.target.value)}
                          placeholder="Örn: 50x30mm"
                        />
                      </div>

                      <div>
                        <Label htmlFor="finishing">Yüzey İşlemi</Label>
                        <Select value={formData.finishing} onValueChange={(value) => handleInputChange('finishing', value)}>
                          <SelectTrigger>
                            <SelectValue placeholder="Yüzey işlemi seçin" />
                          </SelectTrigger>
                          <SelectContent>
                            {finishingOptions.map(option => (
                              <SelectItem key={option.value} value={option.value}>
                                {option.label}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>

                      <div>
                        <Label htmlFor="urgency">Aciliyet</Label>
                        <Select value={formData.urgency} onValueChange={(value) => handleInputChange('urgency', value)}>
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="normal">Normal (5-7 gün)</SelectItem>
                            <SelectItem value="urgent">Acil (2-3 gün)</SelectItem>
                            <SelectItem value="express">Ekspres (1 gün)</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>

                    <div>
                      <Label htmlFor="notes">Ek Notlar</Label>
                      <Textarea
                        id="notes"
                        value={formData.notes}
                        onChange={(e) => handleInputChange('notes', e.target.value)}
                        placeholder="Özel istekleriniz, teknik detaylar..."
                        rows={3}
                      />
                    </div>
                  </div>

                  <Separator />

                  {/* Contact Information */}
                  <div className="space-y-4">
                    <h3 className="text-lg font-semibold">İletişim Bilgileri</h3>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="companyName">Firma Adı *</Label>
                        <Input
                          id="companyName"
                          value={formData.companyName}
                          onChange={(e) => handleInputChange('companyName', e.target.value)}
                          placeholder="Firma adınız"
                          required
                        />
                      </div>

                      <div>
                        <Label htmlFor="contactName">Yetkili Kişi</Label>
                        <Input
                          id="contactName"
                          value={formData.contactName}
                          onChange={(e) => handleInputChange('contactName', e.target.value)}
                          placeholder="Adınız Soyadınız"
                        />
                      </div>

                      <div>
                        <Label htmlFor="email">E-posta *</Label>
                        <Input
                          id="email"
                          type="email"
                          value={formData.email}
                          onChange={(e) => handleInputChange('email', e.target.value)}
                          placeholder="ornek@firma.com"
                          required
                        />
                      </div>

                      <div>
                        <Label htmlFor="phone">Telefon</Label>
                        <Input
                          id="phone"
                          value={formData.phone}
                          onChange={(e) => handleInputChange('phone', e.target.value)}
                          placeholder="0555 123 45 67"
                        />
                      </div>
                    </div>
                  </div>

                  <Separator />

                  {/* Submit Button */}
                  <div className="flex justify-end">
                    <Button 
                      type="submit" 
                      disabled={isSubmitting}
                      className="bg-green-600 hover:bg-green-700 text-white px-8 py-3"
                      size="lg"
                    >
                      {isSubmitting ? (
                        <>
                          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                          Gönderiliyor...
                        </>
                      ) : (
                        <>
                          <Send className="h-4 w-4 mr-2" />
                          Teklif Talebini Gönder
                        </>
                      )}
                    </Button>
                  </div>
                </form>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}
